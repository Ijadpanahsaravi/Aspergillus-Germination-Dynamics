rm(list = ls())

pkgs <- c("dplyr", "readxl","data.table","ggplot2","tidyr","Metrics","growthrates", "openxlsx", "zoo")
lapply(pkgs, library, character.only = T)

path = "/"
setwd("")

csv = list.files(path = path, pattern = '*.csv')
csv_read <- function(csv){
  df <- read.csv(paste0(path, csv)) %>%
    dplyr::select(ObjectId,time,Area,Circularity,well)%>%
    mutate(filename = as.character(csv))
  return(df)
}
df <- do.call(rbind, lapply(csv, csv_read))


t <- df %>%
  group_by(ObjectId) %>%
  mutate(
    InitialArea = first(Area, na.rm = TRUE), # Capture the initial area at t = 0, handling NA
    InitialCircularity = first(Circularity, na.rm = TRUE), # Capture the initial circularity at t = 0, handling NA
    PercentIncrease = ((Area - InitialArea) / InitialArea) * 100, # Calculate percentage increase from t = 0
    CircularityChange = abs(Circularity - InitialCircularity) / InitialCircularity)  %>%
  group_by(ObjectId,filename) %>%
  mutate(R = case_when( CircularityChange < 0.1 & PercentIncrease < 10 ~ 1,TRUE ~ 0 ),
         S = case_when(CircularityChange < 0.1 & PercentIncrease >= 10 ~ 1,TRUE ~ 0 ),
         G = case_when(CircularityChange >= 0.1 & PercentIncrease >= 50 ~ 1 , TRUE ~ 0 ),
         missing = case_when(is.na(Area) & sum(S + G) == 0 ~ 1, TRUE ~ 0)) %>%
  mutate(R = na_if(R, 0), S = na_if(S, 0), G = na_if(G, 0)) %>%
  mutate(R = na.locf0(R), S = na.locf0(S), G = na.locf0(G))%>%
  ungroup()%>%
  mutate(status = case_when(G == 1 ~ 2,
                            S == 1 & is.na(G) ~ 1,TRUE ~ 0))%>%
  mutate(S = case_when(status > 0 ~ 1,TRUE ~ 0 ),
         G = case_when(status > 1 ~ 1,TRUE ~ 0 ))

ot <- t %>% 
  group_by(well,filename) %>% 
  mutate(count = n_distinct(ObjectId), m = n_distinct(ObjectId[missing == 1])) %>%
  ungroup() %>% 
  group_by(well, time,filename, count)%>%
  summarise_at(c('S','G', 'missing'),list(sum = sum))%>% 
  ungroup() 

mt = reshape2::melt(ot, id.vars = c('time','well','filename','missing_sum', 'count'), measure.vars = c('S_sum','G_sum')) %>%
  group_by(well, time,filename, variable, missing_sum) %>%
  summarise_at(c('count', 'value'), list(sum = sum))

t_out <- mt %>% group_by(well, time,filename, variable) %>%
  mutate(Col = value_sum/count_sum) %>%
  dplyr::select(time,variable,filename, well,missing_sum,count_sum,Col) %>% ungroup()%>%
  mutate(time = time/60)

write.csv(t_out, paste0(path,'output_melt.csv'))
t_out = t_out %>% mutate(Col= Col*100) #%>% filter(time < 17)


missing = t_out %>%
  dplyr::select( well,variable,filename, missing_sum, count_sum, time) %>%
  group_by(well, variable) %>%
  filter(time == max(time)) %>%
  ungroup() %>%
  group_by(well ,variable ) %>%
  summarise_at(c('missing_sum','count_sum'), list(sum=sum)) %>%
  ungroup()


assymetric_mod <- function(time, parms)
{
  with(as.list(parms), {
    y <- Pmax*(1-(1/(1+(time/theta)^d)))  
    return(as.matrix(data.frame(time = time, y = y )))
  })
  
}
attr(assymetric_mod,"pnames") <- c("Pmax","theta", "d")
attr(assymetric_mod,"fname") <- "assymetric_mod"
attr(assymetric_mod,"class") <- c("growthmodel", "function")


fits = all_growthmodels(Col ~ time|   variable + well , 
                        data = t_out,
                        FUN = assymetric_mod,
                        p = c(Pmax = 25 ,theta = 10, d = 4),
                        lower = c(Pmax = 0 ,theta = 1, d = 2),
                        upper = c(Pmax = 120 ,theta = 18, d = 30),
                        which = c("Pmax","theta","d"),
                        method = c("Marq"),
                        ncores =3 )


pdf(file = 'plots_reps_filtered_16hnigernew.pdf')
par(mfrow = c(2,3))
plot(fits,ylim = c(0,100), xlim = c(0,24) )
dev.off()


newList =sapply(summary(fits), `[`,c('par'))
degFree =sapply(summary(fits), `[`,c('df'))
RMSE = residuals(fits)
RMSElist = lapply(split(RMSE,gsub('^(.*)(\\.y)$','\\1',names(RMSE))), unname)
q = sapply(1:length(RMSElist), function(x){
  R = sqrt(mse(RMSElist[[x]], rep(0, length(x)))/(length(RMSElist[[x]])-3))
  names(R) <- names(RMSElist)[x]
  return(R)  
})
df_rmse = data.frame(sample = names(q), RMSE = q)
test = bind_rows(newList)[6,]
stds =  data.frame(sample = names(newList),
                   std_d = sapply(newList,'[',6), 
                   std_theta = sapply(newList,'[',5),
                   std_pmax  = sapply(newList,'[',4),
                   df = sapply(degFree,'[',2)) %>%
  mutate(sample = gsub('\\.par','',sample))%>% 
  left_join(df_rmse)%>%
  separate(sample, into = c('variable','well'), sep = ':')

df_out <- results(fits) %>% 
  mutate_at(c('variable','well'),as.character) %>%
  left_join(stds) %>% 
  mutate(upper_d =  d + (std_d * abs(qt(0.05/2, df)))) %>%
  mutate(lower_d =  d - (std_d * abs(qt(0.05/2, df)))) %>%
  mutate(lower_theta =theta - (std_theta * abs(qt(0.05/2, df))))%>%
  mutate(upper_theta =theta + (std_theta * abs(qt(0.05/2, df)))) %>%
  mutate(lower_pmax   =Pmax - (std_pmax * abs(qt(0.05/2, df))))%>%
  mutate(upper_pmax   =Pmax + (std_pmax * abs(qt(0.05/2, df)))) %>% 
  mutate_if(is.numeric, ~round(.,2)) %>% 
  left_join(missing)

write.csv(df_out, file = paste0(Sys.Date(),'_pmax_repsnew.csv'))




